"""
Django settings for usaid project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from django.core.management.utils import get_random_secret_key
from dotenv import load_dotenv, find_dotenv
from pathlib import Path
from django.conf.locale.en import formats as en_formats
from datetime import timedelta
import dj_database_url
import os

# find file .env
load_dotenv(find_dotenv(), verbose=True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv('DEBUG', 0)))

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',') if os.getenv('ALLOWED_HOSTS') else []

# Application definition
DEFAULT_APPS = [
    'dal',
    'dal_select2',
    'clearcache',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rangefilter',
    'corsheaders',
    'autocompletefilter',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',
    'django_select2',
    'import_export',
]

LOCAL_APPS = [
    'apps.users',
    'apps.transaction',
    'apps.organization',
    'apps.location'
]

INSTALLED_APPS = DEFAULT_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'crum.CurrentRequestUserMiddleware',
]

ROOT_URLCONF = 'usaid.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'usaid.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(default=os.getenv('DB_URL'))
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = os.getenv('STATIC_URL', default='/static/')
STATIC_ROOT = os.getenv('STATIC_ROOT', default='static/')
MEDIA_URL = os.getenv('MEDIA_URL', default='/media/')
MEDIA_ROOT = os.getenv('MEDIA_ROOT', default='media/')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'staticfiles'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# use auth user model
AUTH_USER_MODEL = 'users.User'

# Django Rest Framework Config
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'usaid.paginator.RestFrameworkCustomPageNumberPagination',
    'PAGE_SIZE': 10,
    # 'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'SEARCH_PARAM': 'q',
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'SITB Middlewari API',
    'DESCRIPTION': 'SITB Middleware x SATUSEHAT for chain hospitals',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}

# Json Web Token
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('ACCESS_TOKEN_LIFETIME', '60'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('REFRESH_TOKEN_LIFETIME', '1'))),
    'ROTATE_REFRESH_TOKENS': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'BLACKLIST_AFTER_ROTATION': True,
}

# Email Configuration
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.getenv('EMAIL_PORT')
SERVER_EMAIL = os.getenv('SERVER_EMAIL')
EMAIL_USE_TLS = bool(int(os.getenv('EMAIL_USE_TLS', default=0)))

# Admin Apps
ADMINS = (('Fachrur Rozi', 'fachrur.rozi@erasysconsulting.com'),)

# Change Format Date
en_formats.DATETIME_FORMAT = 'd-m-Y H:i:s'
en_formats.DATE_FORMAT = 'd-m-Y'

# Cache directory
if not os.path.isdir('files/cache'):
    os.makedirs('files/cache')

# logging directory
if not os.path.isdir('files/logs'):
    os.makedirs('files/logs')

# logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[%(levelname)s] %(asctime)s %(pathname)s Line %(lineno)d PID %(process)d: %(message)s',
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'files/logs/usaidtb.log',
            'when': 'D',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'simple'
        },
        'post_office': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
            'filters': ['require_debug_false'],
        },
        'django.security.DisallowedHost': {
            'handlers': ['mail_admins'],
            'level': 'CRITICAL',
            'propagate': False,
        },
        'post_office': {
            'handlers': ['post_office', ],
            'level': 'INFO'
        },
        'apps': {
            'handlers': ['console', 'file'],
            'level': 'INFO'
        },
    },
}

# Cors Configuration
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_URLS_REGEX = r'^/api/.*$'

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

# Cache
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 600
CACHE_MIDDLEWARE_KEY_PREFIX = ''
REDIS_CONFIG = 'redis://redis:6379/0'
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('CELERY_BROKER_URL', default=REDIS_CONFIG),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        "KEY_PREFIX": "usaidtb"
    }
}


# Tell select2 which cache configuration to use:
SELECT2_CACHE_BACKEND = "default"

# Celery
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', default=REDIS_CONFIG)
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', default=REDIS_CONFIG)
CELERY_TIMEZONE = os.getenv('CELERY_TIMEZONE', default='Asia/Jakarta')
CELERY_ENABLE_UTC = bool(int(os.getenv('CELERY_ENABLE_UTC', default=1)))
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 604800}

# Login config
LOGIN_URL = '/admin/'
LOGIN_REDIRECT_URL = '/admin/'

# Config satu sehat
ENV_API_KEY = os.getenv('ENV_API_KEY', default='dev')
if ENV_API_KEY == "prod":
    BASE_URL = 'https://api-satusehat.kemkes.go.id/fhir-r4/v1'
    AUTH_URL = 'https://api-satusehat.kemkes.go.id/oauth2/v1'
    CONSENT_URL = 'https://api-satusehat.dto.kemkes.go.id/consent/v1'
elif ENV_API_KEY == "stg":
    BASE_URL = 'https://api-satusehat-stg.dto.kemkes.go.id/fhir-r4/v1'
    AUTH_URL = 'https://api-satusehat-stg.dto.kemkes.go.id/oauth2/v1'
    CONSENT_URL = 'https://api-satusehat-stg.dto.kemkes.go.id/consent/v1'
elif ENV_API_KEY == "neg":
    BASE_URL = 'https://api-satusehat-neg.dto.kemkes.go.id/fhir-r4/v1'
    AUTH_URL = 'https://api-satusehat-dev.dto.kemkes.go.id/oauth2/v1'
    CONSENT_URL = 'https://api-satusehat-dev.dto.kemkes.go.id/consent/v1'
    BASE_URL_NEG = 'https://api-satusehat-dev.dto.kemkes.go.id/fhir-r4/v1'
else:
    BASE_URL = 'https://api-satusehat-dev.dto.kemkes.go.id/fhir-r4/v1'
    AUTH_URL = 'https://api-satusehat-dev.dto.kemkes.go.id/oauth2/v1'
    CONSENT_URL = 'https://api-satusehat-dev.dto.kemkes.go.id/consent/v1'

# config sitb
ENV_API_KEY = os.getenv('ENV_API_KEY', default='dev')
STATUS_RESPONSE_SITB = {
    "GAGAL": 'gagal',
    "BERHASIL": 'berhasil',
    "UPDATE_GAGAL": 'update gagal',
    "UPDATE_BERHASIL": 'update berhasil',    
}
if ENV_API_KEY == "prod":
    BASE_URL_SITB = 'https://sirs-yankes.kemkes.go.id/sirsservice/sitb/sitb/senddata'
elif ENV_API_KEY == "neg":
    BASE_URL_SITB = 'https://sirss-yankes.kemkes.go.id/sirsservice/sitbtraining/sitb/senddata'
else:
    BASE_URL_SITB = 'https://sirs-yankes.kemkes.go.id/sirsservice/sitbtraining/sitb/senddata'
    
    
USER_AGENT_BROWSER = "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_5_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"
INVALID_INPUT = "Invalid Input"
LOINC_URL = "http://loinc.org"
SNOMED_URL = "http://snomed.info/sct"
NOT_ACTION = "tidak dilakukan"
DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"
TERMINOLOGY_NOT_ACTION = "http://terminology.hl7.org/CodeSystem/data-absent-reason"
NOT_PERFORM = "Not Performed"
TERMINOLOGY_OBSERVATION_INTERPRETATION = "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation"
TERMINOLOGY_DIAGNOSTIC_CODE_SYSTEM = "http://terminology.hl7.org/CodeSystem/v2-0074"
NOT_DETECT = "Not detected"
NOT_FOUND = "not found"
ACCESS_TOKEN_USER = "access_token_user"
OBSERVATION_SYSTEM_URL = "http://sys-ids.kemkes.go.id/observation/"
OBSERVATION_CATEGORY_SYSTEM = "http://terminology.hl7.org/CodeSystem/observation-category"
URN_UUID = "urn:uuid:"
ORGANIZATION_RESOURCE = "Organization"
PATIENT_RESOURCE = "Patient"
PRACTITIONER_RESOURCE = "Practitioner"
USE_DJANGO_JQUERY = True
UNIT_OF_MEASURE = "https://unitsofmeasure.org"
DATE_TIME_FORMAT_TIMEZONE = "%Y-%m-%dT%H:%M:%SZ"
URL_FORMAT = "{}/{}"
MESSAGE_ERRORS = "Pengiriman data gagal. Mohon periksa kredensial dan pastikan semua data sudah lengkap dan dalam format yang benar."
LABEL_SATU_SEHAT = "Satu Sehat"
LABEL_SITB = "SITB"

CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS').split(',') if os.getenv('CSRF_TRUSTED_ORIGINS') else []